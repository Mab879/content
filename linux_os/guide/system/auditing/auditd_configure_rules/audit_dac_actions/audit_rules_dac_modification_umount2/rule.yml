documentation_complete: true

title: 'Record Events that Modify the System''s Discretionary Access Controls - umount2'

description: |-
    At a minimum, the audit system should collect file system umount2
    changes. If the <tt>auditd</tt> daemon is configured
    to use the <tt>augenrules</tt> program to read audit rules during daemon
    startup (the default), add the following line to a file with suffix
    <tt>.rules</tt> in the directory <tt>/etc/audit/rules.d</tt>:
    <pre>-a always,exit -F arch=b32 -S umount2 -F auid&gt;={{{ auid }}} -F auid!=unset -F key=perm_mod</pre>
    If the system is 64 bit then also add the following line:
    <pre>-a always,exit -F arch=b64 -S umount2 -F auid&gt;={{{ auid }}} -F auid!=unset -F key=perm_mod</pre>
    If the <tt>auditd</tt> daemon is configured to use the <tt>auditctl</tt>
    utility to read audit rules during daemon startup, add the following line to
    <tt>/etc/audit/audit.rules</tt> file:
    <pre>-a always,exit -F arch=b32 -S umount2 -F auid&gt;={{{ auid }}} -F auid!=unset -F key=perm_mod</pre>
    If the system is 64 bit then also add the following line:
    <pre>-a always,exit -F arch=b64 -S umount2 -F auid&gt;={{{ auid }}} -F auid!=unset -F key=perm_mod</pre>

rationale: |-
    The changing of file permissions could indicate that a user is attempting to
    gain access to information that would otherwise be disallowed. Auditing DAC modifications
    can facilitate the identification of patterns of abuse among both authorized and
    unauthorized users.

severity: medium

identifiers:
    cce@rhel9: CCE-88570-7
    cce@sle12: CCE-83219-6
    cce@sle15: CCE-91250-1

references:
    disa: CCI-000130,CCI-000169,CCI-000172,CCI-002884
    nist@sle12: AU-3,AU-3.1,AU-12.1(ii),AU-12(a),AU-12.1(iv),AU-12(c),MA-4(1)(a)
    srg: SRG-OS-000037-GPOS-00015,SRG-OS-000062-GPOS-00031,SRG-OS-000392-GPOS-00172,SRG-OS-000462-GPOS-00206,SRG-OS-000471-GPOS-00215
    stigid@sle12: SLES-12-020300
    stigid@sle15: SLES-15-030360

{{{ complete_ocil_entry_audit_syscall(syscall="umount2") }}}

warnings:
    - general: |-
        Note that these rules can be configured in a
        number of ways while still achieving the desired effect. Here the system calls
        have been placed independent of other system calls. Grouping these system
        calls with others as identifying earlier in this guide is more efficient.

fixtext: |-
    {{{ fixtext_audit_rules(event="umount2", key="perm_mod") | indent(4) }}}

srg_requirement: '{{{ srg_requirement_audit_syscall("umount2") }}}'

template:
    name: audit_rules_dac_modification
    vars:
        attr: umount2

vuldiscussion: |-
    Without establishing what type of events occurred, it would be difficult to establish, correlate, and investigate the events leading up to an outage or attack.

    Audit record content that may be necessary to satisfy this requirement includes, for example, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.

    Associating event types with detected events in the operating system audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured operating system.

checktext: |-
    To determine if the system is configured to audit calls to the
     umount2 system call, run the following command:
     $ sudo grep "umount2" /etc/audit/audit.*
    If the system is configured to audit this activity, it will return a line.


    If no line is returned, then this is a finding.
